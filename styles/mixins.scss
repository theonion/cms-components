@import 'sass-toolkit/utils/flexbox';
@import 'colors';


@mixin button-unstyled {
  background: none;
  border: none;
}

@mixin input-with-icon-container {
  /* An input field that looks like it has icons inside of it. */

  display: table;
  font-weight: normal;
  width: 100%;

  > .icon {
    display: table-cell;
    padding-right: 10px;
    text-align: center;
    width: 1em;

    > button {
      @include button-unstyled;
    }
  }

  input {
    border: none;
    display: table-cell;
    outline: 0;
    width: 100%;
  }
}

@mixin ease($property: all, $time: 200ms) {
  -webkit-transition: $property $time cubic-bezier(0.250, 0.250, 0.840, 0.325);
  -moz-transition: $property $time cubic-bezier(0.250, 0.250, 0.840, 0.325);
  -ms-transition: $property $time cubic-bezier(0.250, 0.250, 0.840, 0.325);
  -o-transition: $property $time cubic-bezier(0.250, 0.250, 0.840, 0.325);
  transition: $property $time cubic-bezier(0.250, 0.250, 0.840, 0.325);
}

@mixin spin {
  -webkit-animation: spin 1s infinite linear;
  -moz-animation: spin 1s infinite linear;
  -ms-animation: spin 1s infinite linear;
  -o-animation: spin 1s infinite linear;
  animation: spin 1s infinite linear;
}

@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

@mixin circle($size) {
  width: $size;
  height: $size;
  line-height: $size;
  border-radius: 50%;
}

@mixin endcap($size) {
  padding: ($size / 2) $size;
  border-radius: $size + 5;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

@mixin edit-form {
  display: block;
  width: 100%;
  height: 100%;
  @include flexbox;
  @include flex-direction(column);

  & > .container {
    padding-top: 1em;
    overflow-y: scroll;
  }
}

@mixin button-color ($attribute: 'background-color', $type: 'default'){

  $base: palette($type, base);
  $hover: palette($type, hover);
  $active: palette($type, active);
  $inactive: palette($type, inactive);

  #{$attribute}: $base;
  &:hover {
    #{$attribute}: $hover;
  }
  &:active, &:focus {
    #{$attribute}: $active;
  }
  &[disabled], &.inactive {
   #{$attribute}: $inactive;
  }
}

@function palette($palette, $tone: 'default') {
    @return map-get(map-get($palettes, $palette), $tone);
}
